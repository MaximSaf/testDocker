[{"id":0,"href":"/address/search/","title":"Search","section":"Addresses","content":" Geo API # Поиск адреса\nДокументация # Маршрут: /api/address/search метод POST\ntype SearchRequest struct { Query string `json:\u0026#34;query\u0026#34;` } type SearchResponse struct { Addresses []*Address `json:\u0026#34;addresses\u0026#34;` } Маршрут: /api/address/geocode метод POST\ntype GeocodeRequest struct { Lat string `json:\u0026#34;lat\u0026#34;` Lng string `json:\u0026#34;lng\u0026#34;` } type GeocodeResponse struct { Addresses []*Address `json:\u0026#34;addresses\u0026#34;` } Провайдер # API: https://dadata.ru/api/\n"},{"id":1,"href":"/tasks/","title":"Обновление данных в реальном времени","section":"Test","content":" Задача: Обновление данных в реальном времени # Напишите воркер, который будет обновлять данные в реальном времени, на текущей странице. Текст данной задачи менять нельзя, только время и счетчик.\nФайл данной страницы: /app/static/tasks/_index.md\nДолжен меняться счетчик и время:\nТекущее время: 2021-10-13 15:00:00\nСчетчик: 0\nКритерии приемки: # Воркер должен обновлять данные каждые 5 секунд Счетчик должен увеличиваться на 1 каждые 5 секунд Время должно обновляться каждые 5 секунд "},{"id":2,"href":"/tasks/graph/","title":"Построение графа","section":"Обновление данных в реальном времени","content":" Построение графа # Нужно написать воркер, который будет строить граф на текущей странице, каждые 5 секунд От 5 до 30 элементов, случайным образом. Все ноды графа должны быть связаны.\ntype Node struct { ID int Name string Form string // \u0026#34;circle\u0026#34;, \u0026#34;rect\u0026#34;, \u0026#34;square\u0026#34;, \u0026#34;ellipse\u0026#34;, \u0026#34;round-rect\u0026#34;, \u0026#34;rhombus\u0026#34; Links []*Node } Mermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nПример # {{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} graph LR A[Square Rect] --\u0026gt; B((Circle)) A --\u0026gt; C(Round Rect) B --\u0026gt; D{Rhombus} C --\u0026gt; D C --\u0026gt; B {{\u0026lt;/* /mermaid */\u0026gt;}} graph LR A[Square Rect] --\u003e B((Circle)) A --\u003e C(Round Rect) B --\u003e D{Rhombus} C --\u003e D C --\u003e B "},{"id":3,"href":"/tasks/binary/","title":"Построение сбалансированного бинарного дерева","section":"Обновление данных в реальном времени","content":" Задача построить сбалансированное бинарное дерево # Используя AVL дерево, постройте сбалансированное бинарное дерево, на текущей странице.\nНужно написать воркер, который стартует дерево с 5 элементов, и каждые 5 секунд добавляет новый элемент в дерево.\nКаждые 5 секунд на странице появляется актуальная версия, сбалансированного дерева.\nПри вставке нового элемента, в дерево, нужно перестраивать дерево, чтобы оно оставалось сбалансированным.\nКак только дерево достигнет 100 элементов, генерируется новое дерево с 5 элементами.\npackage binary import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) type Node struct { Key int Height int Left *Node Right *Node } type AVLTree struct { Root *Node } func NewNode(key int) *Node { return \u0026amp;Node{Key: key, Height: 1} } func (t *AVLTree) Insert(key int) { t.Root = insert(t.Root, key) } func (t *AVLTree) ToMermaid() string { } func height(node *Node) int { } func max(a, b int) int { } func updateHeight(node *Node) { } func getBalance(node *Node) int { } func leftRotate(x *Node) *Node { } func rightRotate(y *Node) *Node { } func insert(node *Node, key int) *Node { } func GenerateTree(count int) *AVLTree { } Не обязательно использовать выше описанный код, можно использовать любую реализацию, выдающую сбалансированное бинарное дерево.\nMermaid Chart # MermaidJS is library for generating svg charts and diagrams from text.\nПример вывода # {{\u0026lt;/* mermaid [class=\u0026#34;text-center\u0026#34;]*/\u0026gt;}} graph TD 610 --\u0026gt; 176 176 --\u0026gt; 65 65 --\u0026gt; 48 48 --\u0026gt; 4 65 --\u0026gt; 130 176 --\u0026gt; 340 340 --\u0026gt; 273 273 --\u0026gt; 220 273 --\u0026gt; 317 340 --\u0026gt; 348 348 --\u0026gt; 403 610 --\u0026gt; 758 758 --\u0026gt; 703 703 --\u0026gt; 684 684 --\u0026gt; 673 703 --\u0026gt; 741 741 --\u0026gt; 705 758 --\u0026gt; 949 949 --\u0026gt; 847 {{\u0026lt;/* /mermaid */\u0026gt;}} graph TD 610 --\u003e 176 176 --\u003e 65 65 --\u003e 48 48 --\u003e 4 65 --\u003e 130 176 --\u003e 340 340 --\u003e 273 273 --\u003e 220 273 --\u003e 317 340 --\u003e 348 348 --\u003e 403 610 --\u003e 758 758 --\u003e 703 703 --\u003e 684 684 --\u003e 673 703 --\u003e 741 741 --\u003e 705 758 --\u003e 949 949 --\u003e 847 "}]