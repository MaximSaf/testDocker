<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Test on Задачи с proxy</title>
    <link>http://localhost:1313/</link>
    <description>Recent content in Test on Задачи с proxy</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/address/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/address/search/</guid>
      <description>&lt;h1 id=&#34;geo-api&#34;&gt;&#xA;  Geo API&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#geo-api&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;link rel=&#34;stylesheet&#34; href=&#34;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&#34; crossorigin=&#34;&#34;/&gt;&#xA;&lt;p&gt;Поиск адреса&lt;/p&gt;&#xA;&lt;input id=&#34;search&#34; /&gt;&#xA;&lt;div id=&#34;result&#34;&gt;&lt;/div&gt;&#xA;&lt;div id=&#34;mapid&#34; style=&#34;height: 50vh&#34;&gt;&lt;/div&gt;&#xA;&lt;h2 id=&#34;документация&#34;&gt;&#xA;  Документация&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%d0%b4%d0%be%d0%ba%d1%83%d0%bc%d0%b5%d0%bd%d1%82%d0%b0%d1%86%d0%b8%d1%8f&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Маршрут: &lt;code&gt;/api/address/search&lt;/code&gt; метод &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SearchRequest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;query&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SearchResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Addresses&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;addresses&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Маршрут: &lt;code&gt;/api/address/geocode&lt;/code&gt; метод &lt;code&gt;POST&lt;/code&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GeocodeRequest&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Lat&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;lat&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Lng&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;lng&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;GeocodeResponse&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Addresses&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Address&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`json:&amp;#34;addresses&amp;#34;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;провайдер&#34;&gt;&#xA;  Провайдер&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%d0%bf%d1%80%d0%be%d0%b2%d0%b0%d0%b9%d0%b4%d0%b5%d1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;API: &lt;a href=&#34;https://dadata.ru/api/&#34;&gt;https://dadata.ru/api/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;!-- Include Leaflet JavaScript --&gt;&#xA;&lt;script src=&#34;https://unpkg.com/leaflet@1.7.1/dist/leaflet.js&#34; crossorigin=&#34;&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    let startPos = [59.9311, 30.3609];&#xA;    var mymap = L.map(&#39;mapid&#39;).setView(startPos, 11);&#xA;    L.tileLayer(&#39;https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png&#39;, {&#xA;        attribution: &#39;Map data &amp;copy; OpenStreetMap contributors&#39;,&#xA;        maxZoom: 18&#xA;    }).addTo(mymap);&#xA;    var currentMarker = null;&#xA;    // Обработчик события клика по карте&#xA;    mymap.on(&#39;click&#39;, function(e) {&#xA;        let data = {&#xA;            lat: e.latlng.lat.toString(),&#xA;            lng: e.latlng.lng.toString()&#xA;        };&#xA;        fetch(&#39;/api/address/geocode&#39;, {&#xA;            method: &#39;POST&#39;,&#xA;            headers: {&#xA;                &#39;Content-Type&#39;: &#39;application/json&#39;&#xA;            },&#xA;            body: JSON.stringify(data)&#xA;        })&#xA;        .then(response =&gt; response.json())&#xA;        .then(data =&gt; {&#xA;           table.setData(data.addresses);&#xA;           if (data.addresses.length &gt; 0) {&#xA;                mymap.flyTo([data.addresses[0].lat, data.addresses[0].lon], 17);&#xA;                if (currentMarker) {&#xA;                    // Перемещение существующего маркера&#xA;                    currentMarker.setLatLng({lat: data.addresses[0].lat, lng: data.addresses[0].lon});&#xA;                } else {&#xA;                    // Создание нового маркера&#xA;                    currentMarker = L.marker({lat: data.addresses[0].lat, lng: data.addresses[0].lon}).addTo(mymap);&#xA;                }&#xA;           }&#xA;        })&#xA;        .catch(error =&gt; {&#xA;            console.log(&#39;Error:&#39;, error);&#xA;        });&#xA;    });&#xA;    // Сброс текущего маркера при двойном клике&#xA;    mymap.on(&#39;dblclick&#39;, function(e) {&#xA;        console.log(&#39;dblclick&#39;);&#xA;        if (currentMarker) {&#xA;            mymap.removeLayer(currentMarker);&#xA;            currentMarker = null;&#xA;        }&#xA;    });&#xA;&lt;/script&gt;&#xA;&lt;link href=&#34;https://unpkg.com/tabulator-tables@5.5.0/dist/css/tabulator.min.css&#34; rel=&#34;stylesheet&#34;&gt;&#xA; &lt;script type=&#34;text/javascript&#34; src=&#34;https://unpkg.com/tabulator-tables@5.5.0/dist/js/tabulator.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;&#xA;//Build Tabulator&#xA;var tableData = [];&#xA;var table = new Tabulator(&#34;#result&#34;, {&#xA;    height:&#34;311px&#34;,&#xA;    layout:&#34;fitColumns&#34;,&#xA;    reactiveData:true, //turn on data reactivity&#xA;    responsiveLayout: &#34;hide&#34;,&#xA;    data:tableData, //assign data to table&#xA;    placeholder:&#34;No Data Set&#34;,&#xA;    selectable: true,&#xA;    autoColumns:true, //create columns from data field names&#xA;    rowClick:function(e, cell) {&#xA;        e.preventDefault();&#xA;        console.log(&#34;rowClick fired&#34;);&#xA;        e.stopPropagation();&#xA;    },&#xA;    selectableCheck:function(row){&#xA;        //row - row component&#xA;        let data = row.getData();&#xA;        if (data.lat != &#34;&#34; &amp;&amp; data.lon != &#34;&#34;) {&#xA;            mymap.flyTo([data.lat, data.lon], 17);&#xA;            if (currentMarker) {&#xA;                // Перемещение существующего маркера&#xA;                currentMarker.setLatLng({lat: data.lat, lng: data.lon});&#xA;            } else {&#xA;                // Создание нового маркера&#xA;                currentMarker = L.marker({lat: data.lat, lng: data.lon}).addTo(mymap);&#xA;            }&#xA;        }&#xA;        table.deselectRow();&#xA;        console.log(&#34;select fired&#34;);&#xA;        return true; //allow selection of rows where the age is greater than 18&#xA;    },&#xA;});&#xA;document.getElementById(&#39;search&#39;).addEventListener(&#39;input&#39;, function() {&#xA;    console.log(&#39;search change&#39;);&#xA;    if (this.value.length &lt; 3) {&#xA;        return;&#xA;    }&#xA;    const data = {&#xA;        query: this.value&#xA;    };&#xA;    fetch(&#39;/api/address/search&#39;, {&#xA;        method: &#39;POST&#39;,&#xA;        headers: {&#xA;            &#39;Content-Type&#39;: &#39;application/json&#39;&#xA;        },&#xA;        body: JSON.stringify(data)&#xA;    })&#xA;    .then(response =&gt; response.json())&#xA;    .then(data =&gt; {&#xA;       table.setData(data.addresses);&#xA;       if (data.addresses.length &gt; 0) {&#xA;            mymap.flyTo([data.addresses[0].lat, data.addresses[0].lon], 17);&#xA;       }&#xA;    })&#xA;    .catch(error =&gt; {&#xA;        console.log(&#39;Error:&#39;, error);&#xA;    });&#xA;});&#xA;&lt;/script&gt;</description>
    </item>
    <item>
      <title>Построение графа</title>
      <link>http://localhost:1313/tasks/graph/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tasks/graph/</guid>
      <description>&lt;h1 id=&#34;построение-графа&#34;&gt;&#xA;  Построение графа&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%d0%bf%d0%be%d1%81%d1%82%d1%80%d0%be%d0%b5%d0%bd%d0%b8%d0%b5-%d0%b3%d1%80%d0%b0%d1%84%d0%b0&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Нужно написать воркер, который будет строить граф на текущей странице, каждые 5 секунд&#xA;От 5 до 30 элементов, случайным образом. Все ноды графа должны быть связаны.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Form&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// &amp;#34;circle&amp;#34;, &amp;#34;rect&amp;#34;, &amp;#34;square&amp;#34;, &amp;#34;ellipse&amp;#34;, &amp;#34;round-rect&amp;#34;, &amp;#34;rhombus&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;Links&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Node&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;mermaid-chart&#34;&gt;&#xA;  Mermaid Chart&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mermaid-chart&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://mermaid-js.github.io/&#34;&gt;MermaidJS&lt;/a&gt; is library for generating svg charts and diagrams from text.&lt;/p&gt;&#xA;&lt;h2 id=&#34;пример&#34;&gt;&#xA;  Пример&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%d0%bf%d1%80%d0%b8%d0%bc%d0%b5%d1%80&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;book-columns flex flex-wrap&#34;&gt;&#xA;&#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-tpl&#34; data-lang=&#34;tpl&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mermaid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text-center&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;]*/&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;graph LR&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A[Square Rect] --&amp;gt; B((Circle))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;A --&amp;gt; C(Round Rect)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B --&amp;gt; D&lt;span style=&#34;color:#75715e&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Rhombus&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C --&amp;gt; D&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;C --&amp;gt; B&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{{&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/*&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mermaid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*/&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;}}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;  &lt;/div&gt;&#xA;&#xA;  &lt;div class=&#34;flex-even markdown-inner&#34;&gt;&#xA;    &lt;script src=&#34;http://localhost:1313/mermaid.min.js&#34;&gt;&lt;/script&gt;&#xA;  &lt;script&gt;mermaid.initialize({&#xA;  &#34;flowchart&#34;: {&#xA;    &#34;useMaxWidth&#34;:true&#xA;  },&#xA;  &#34;theme&#34;: &#34;default&#34;&#xA;}&#xA;)&lt;/script&gt;&#xA;&lt;p class=&#34;mermaid&#34;&gt;&#xA;graph LR&#xA;A[Square Rect] --&gt; B((Circle))&#xA;A --&gt; C(Round Rect)&#xA;B --&gt; D{Rhombus}&#xA;C --&gt; D&#xA;C --&gt; B&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Построение сбалансированного бинарного дерева</title>
      <link>http://localhost:1313/tasks/binary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/tasks/binary/</guid>
      <description>&lt;h1 id=&#34;задача-построить-сбалансированное-бинарное-дерево&#34;&gt;&#xA;  Задача построить сбалансированное бинарное дерево&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%d0%b7%d0%b0%d0%b4%d0%b0%d1%87%d0%b0-%d0%bf%d0%be%d1%81%d1%82%d1%80%d0%be%d0%b8%d1%82%d1%8c-%d1%81%d0%b1%d0%b0%d0%bb%d0%b0%d0%bd%d1%81%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%bd%d0%be%d0%b5-%d0%b1%d0%b8%d0%bd%d0%b0%d1%80%d0%bd%d0%be%d0%b5-%d0%b4%d0%b5%d1%80%d0%b5%d0%b2%d0%be&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Используя AVL дерево, постройте сбалансированное бинарное дерево, на текущей странице.&lt;/p&gt;&#xA;&lt;p&gt;Нужно написать воркер, который стартует дерево с 5 элементов, и каждые 5 секунд добавляет новый элемент в дерево.&lt;/p&gt;&#xA;&lt;p&gt;Каждые 5 секунд на странице появляется актуальная версия, сбалансированного дерева.&lt;/p&gt;&#xA;&lt;p&gt;При вставке нового элемента, в дерево, нужно перестраивать дерево, чтобы оно оставалось сбалансированным.&lt;/p&gt;&#xA;&lt;p&gt;Как только дерево достигнет 100 элементов, генерируется новое дерево с 5 элементами.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
